数据
是系统的核心,我们编程的目的就是为了操作数据(增,删,改,查)

在代码中如何定义和存储数据呢?需要通过变量或者常量以及数据类型

Java是一种强类型的语言,也就是说任何数据都需要有类型.

Java语言分为基本类型和对象类型两大类数据类型(无数种)
1)基本类型(8种):
byte	    字节型	    占1字节=8bit     -128~127			0
short       短整型	    占2字节=16bit    -32768~32767		0
int	    整型	    占4字节=32bit    -2147483648~2147483647	0
long	    长整型	    占8字节=64bit    -2^63 ~ 2^63 - 1		0
float	    单精度浮点数    占4字节=32bit    -3.4E+38 ~ 3.4E+38		0.0
double	    双精度浮点数    占8字节=64bit    -1.797E+308 ~ 1.797E+308	0.0
char	    字符型          占2字节=16bit    'a' , 'B', '您','1'	\u0000
boolean	    布尔类型        占1字节=8bit     true/false			false

注:1.JAVA中所有的数字都是带符号的
   2.字符型和字符串是不同的,字符型用单引号,字符串用双引号
     char c = '您';
     String s = "好好学习,天天向上!"
   3.java中,你写一个整数,默认是int类型的,写一个小数,默认是double类型的.
     float f  = 3.4;//编译错误,3.4默认是double类型的,不能赋值给float类型的变量

2)对象类型
  内置对象类型(API)
	Scanner,Math,Random,String...

  自定义对象类型
	我们编程时写过的所有类都是自定义对象类型

----------------------------------------------------------
1byte = 8bit
1K = 1024byte
1MB = 1024K
1GB = 1024MB
1TB = 1024GB
1PB = 1024TB
1EB = 1024PB
1ZB = 1024EB
1YB = 1024ZB
1BB = 1024YB
1NB = 1024BB
1DB = 1024NB

注:手机流量是以1000为计算界限的
----------------------------------------------------------

进制
二进制:只有0和1所组成,每遇到2进1

二进制		十进制		
0000 0101	1*2^2 + 0*2^1 + 1*2^0 = 5
0000 1010	1*2^3 + 1*2^1 = 10;
0000 1111	15

二进制转十进制	
先从右往左标记,然后累加相应位数的2的标记次方

十进制转二进制	
连续除以2,然后倒取余数

小练习:
89	        --->	0101 1001

777		--->	0011 0000 1001

1000 0101       --->	133

0011 1000  --->	 56
0001 1100  --->  28
0000 1110  --->  14
0000 0111  --->  7

位移运算
二进制中,向右移动一位,相当于除以2,向左移动一位,相当于乘以2


八进制:由0~7组成,每逢8进1
032	0*8^2 + 3*8^1 + 2*8^0 = 26

十六进制:由0~9和A~F组成,以0x开头
int i = 0x0029;
2*16^1 + 9*16^0 = 41

小练习:
求出0x0288的二进制?
0x0288
---> 648 ---> 1010001000
----------------------------------------------------------
变量:
语法
变量的类型 变量名 [= 给变量的初始值];
注:
变量名和类名一样,都是由数字,字母,_,$组成并且不能是数字开头
变量名尽量采用小写(常量除外)

|.可以在声明的时候直接初始化(第一次给变量赋值)
  如:int i = 100;
     double d = 3.14;
     String str = "你好!";

||.先声明变量,在使用前,初始化
  如:int i;
     .....
     i = 100;

字面量:就是指代数据本身
"你好!",'A',3.14,100
----------------------------------------------------------
常量:
在变量的基础上加一个关键字--final
常量一定要初始化,它的值是不能改变的
如:
final int ROW_EACH_PAGE = 10;//定义了一个常量

常量的命名规则:使用大写字母,并且中间用下划线隔开

----------------------------------------------------------

数据类型转换:
1.自动类型转换(隐式类型转换)
  由精度小的数据类型可以自动转换成精度大的数据类型

如:byte -> short -> int -> long
   char -> int
   boolean -> int //error

2.强制类型转换
  由精度大的数据类型往精度小的数据类型转换时,可能损失精度,
  编译器会报错,必须采用强制转换
  如:
  1)在所需转换的数值前面加(类型)
    注:这里的类型,可以是基本类型,也可以是对象类型
    int i = 220900;
    char c = (char)i;

    float f = (float)3.14;

  2)只有long,double,float可以这样转换
    在所需转换的数值后面加L/l,D/d,F/f
    float f = 3.14F;

    注意:
    在JAVA中,两种数据类型进行运算时,结果都是偏向数据类型
    更大的那一方

--------------------------------------------------------
特殊符号:
\t	制表符	    表示隔开一个tab的距离
\n	换行	    到下一行的起始位置
\r	回车	    到当前行的起始位置
\b      退格        相当于键盘上的BackSpace
\\      反斜杠
\"	双引号
\'	单引号
--------------------------------------------------------
cmd命令行中查看中文字的unicode编码的方法
1.打开命令行
2.输入native2ascii回车
3.输入想查询的中文字回车即可得到对应的unicode

ctrl + c 关闭当前转换进程
--------------------------------------------------------

运算符
|.算术运算符
+	1.数学运算	2.字符串的连接
-	减法(负号)
*	乘法
/	除法	100/3 = 33	100/3.0 = 33.33333333
%	取余	100%3 = 1

=	表示赋值    int i = 3;   把3赋值给int类型的变量i
==	表示等于

+=	-=	*=	/=
如:
b = b + 1;  -->  b += 1;//后面这种写法可以避免类型转换问题

++	自增
--	自减
前++	表示++写在变量的前面,表达式和变量的值本身都加1(先自增,后赋值)
后++	表示++写在变量的后面,表达式的值不变,变量加1(先赋值,后自增)

位移运算:性能是最高的
<<	带符号左移位
>>	带符号右移位
<<<	不带符号左移位
>>>	不带符号右移位
<<=	>>=	<<<=	>>>=

面试题:
请你用最快并且性能最高的方式得到2的4次方
System.out.println(2 << 3);
System.out.println(Math.pow(2,4));//error

算术运算符是一种二元运算符,需要两个参数来参与
对算术运算符来说,操作数只能是数字类型(整型,浮点型)
特殊例外:字符串可以用+运算(拼接)

低精度和高精度做运算时,结果是高精度
相同精度数据进行运算,结果是它本身的数据类型

||.比较运算符(返回布尔类型)
<	小于
>	大于
<=	小于等于
>=	大于等于
!=	不等于

|||.逻辑运算符

&&      逻辑与	同真为真,同假为假,只要有一个为假,结果为假

||	逻辑或  同真为真,同假为假,只要有一个为真,结果为真

!	逻辑非	表示取反

如:
boolean b1 = true;
boolean b2 = false;
boolean b = b1 && b2;//false
b = b1 || b2;//true
b = !b1;//false

注意:
逻辑与和逻辑或都是"短路"型运算符
如果运算符左边的结果可以决定整个式子的结果,那么右边部分
就不会执行了
所以,我们在编写代码的时候,需要考虑一下,把哪个条件放在运
算符前面
用逻辑与时,把两个条件中可能为false几率更大的一个放前面
用逻辑或时,把两个条件中可能为true几率更大的一个放前面
这样可以提升整个软件的性能.

||||.按位运算符
&	按位与		同0为0,同1为1,不同为0
|	按位或		同0为0,同1为1,不同为1
^	按位异或	相同为0,不同为1
	公式:
	一个数连续异或同一个数两次,结果是它本身
	5 ^ 7 ^ 7 = 5

如:
5的二进制:0101
7的二进制:0111

  0101
& 0111
------
  0101  --  5 & 7 = 5  

  0101
| 0111
------
  0111	--  5 | 7 = 7

  0101
^ 0111
------
  0010  --  5 ^ 7 = 2
~ 0111
------
  0101

~	按位取反
	
	负数,在计算机中是以补码的形式存储的

	补码 = 原码取反 + 1
	~x = -(x + 1)

负数的二进制如何得到? -8的二进制
8的二进制   00000000 00000000 00000000 00001000
按位取反    11111111 11111111 11111111 11110111
再加1	    11111111 11111111 11111111 11111000

	
~5 = -6
0000 0101
1111 1010
||
0000 0110
1111 1001
1111 1010

练习:
~(-7) = ?    6
7的二进制    0000 0000 0000 0000 0000 0000 0000 0111
按位取反     1111 1111 1111 1111 1111 1111 1111 1000
+1	     1111 1111 1111 1111 1111 1111 1111 1001
-7的取反     0000 0000 0000 0000 0000 0000 0000 0110	


三目运算符 ? :
作用:条件判断

condition ? expression_1 : expression_2;
条件?表达式1:表达式2;

当条件成立时,执行表达式1,当条件不成立是,执行表达式2

相当于
if(条件){
	//表达式1;
}else{
	//表达式2;
}

