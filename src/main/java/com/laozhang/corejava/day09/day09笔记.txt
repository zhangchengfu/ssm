接口的应用:
回调模式(CallBack)
是利用接口来定制契约/规范,然后由调用者A来调用B类中的
方法,并且传入接口的实例,在B类的方法中会回调由A传入的
实例的方法.

如:
假如要设计一个按钮类(Button),给全班同学使用
public class Button{
	private int size;
	private String color;

	public Button(){...}

	public void click(ActionListener a1){
		...
		//点击按钮过后该做什么?
		a1.actionPerformed([参数列表]);//回调
	}
}
//接口
public interface ActionListener{
	//定义,当用户点击按钮时,该业务方法执行
	void actionPerformed([参数列表]);
}
-----------------------------------------------------
定义接口有什么好处?
1.制定规范,隐藏实现
2.可以解耦合,[调用者被调用者不直接打交道]
  这就是面向接口编程

例:
SUN定制规范(SPI -- 服务供应商接口)
public interface Driver{
	Connection getConnection(...);
}

//数据库厂商
Oracle数据库实现Driver
public class OracleDriver implements Driver{
	...
}

//SUN提供API -- DriverManager类
public class DriverManager{
	//这个类由SUN公司实现,都是面向接口编程
}

//程序员获得连接
Connection c = DriverManager.getConnection(...);

面向接口编程
1.SUN公司赚到钱了
2.Oracle先花了小钱,转到大钱
3.程序员的好处就是简单,便捷的获取各种数据库连接


面向抽象/面向接口编程
是一种设计思想,目的是为了让整个程序能够具备
拓展性,伸缩性,健壮性

-----------------------------------------------------

抽象类和接口的异同点:
相同点:
1)都是抽象数据类型
2)都不能被实例化,只能做为编译时类型

不同点:
1)抽象类中可以用实现方法,而接口中不能
2)抽象类中可以有构造方法,而接口中不能
3)抽象类只能单继承,而接口可以多重继承
4)一个类只能继承一个抽象类,但是可以实现多个接口

注:
在绝大多数的情况下,接口和抽象类是可以相互替换使用的,
等日后积累到一定程度过后,可以根据经验来判断.

目前只要记住这样一句话:
动词性质的类一般定义成接口
名词性质的类一般定义成抽象类
-----------------------------------------------------

对象之间的关系

一.纵向关系:父子类关系(IS A的关系)
关键字:
继承	extends
实现	implements       


二.横向关系:
1.关联关系[HAS A]
  是指一个类拥有另一个类的实例作为自己属性存在
  从语义上,此关系强调的是类之间是平等的,而不是
  整体和局部的关系,没有高低之分.

  如:
  Host(主机) 和 Display(显示器)
  public class Host{
	private String name;
	private Display dis;
  }
  public class Display{
	private int size;
	private String brand;
  }

关联的特点:
1)方向性
2)多重性	
	一对一	中国夫妻之间关系
	一对多	顾客和订单的关系
	多对多  学生和课程的关系


2.聚合关系[HAS A]
  是关联的一种,但是,聚合关系从语义上强调的是
  整体和局部的关系,但是整体不负责局部的生命周期.

注:从代码上看,无法区分关联和聚合.

如:主机和CPU的关系,从实际来分析,我们可以认为CPU是
   主机的一部分,但是,CPU可以单独存在

public class Host{
	private String brand;
	private CPU cpu;
}
public class CPU{
	private String brand;
}

例如:汽车和轮胎的关系(一对多的聚合关系)


3.组合关系[HAS A]
  同样也是一种特殊的关联,它强调的是整体和局部的关系,
  但是,关联的程度更高,整体负责局部的生命周期.

  如:人和手,人和眼睛

public class Person{
	private Hands hand;

	public Person(){
		//整体负责局部生命周期
		this.hand = new Hands();
	}
}

public class Hands{...}


注:以上三种关系的强弱顺序
   组合 > 聚合 > 关联


4.依赖关系[USE A]
  是指一个类使用到另外一个类,但是不是它自己的组成
  部分.

  如:
  螺丝和螺丝刀

  public class Screw {
	xxx();
  }

  public class ScrewDriver {
	public void screw(Screw s){
		s.xxx();//USA A
	}
  }
----------------------------------------------------

UML(Unified Model Language),统一建模语言

各种图形的含义

矩形:类或者接口,在矩形中可以定义属性和方法

继承	实线+空心三角

实现	虚线+空心三角

关联	实线+箭头

聚合	实线+空心菱形

组合	实线+实心菱形

依赖	虚线+箭头
----------------------------------------------------

软件的设计原则

1.高内聚
  是指模块和模块可以独立完成本职业务功能的能力
  模块/对象设计的越好,内聚力越高.

2.低耦合
  耦合是指模块之间的相互依赖关系
  耦合度越高,说明模块间依赖程度越高,软件设计的就越差

  如何解耦合?
  关键是使用抽象(抽象类和接口)

  一切关系起始于抽象,结束于抽象
