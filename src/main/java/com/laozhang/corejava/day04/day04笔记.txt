回顾:
1.标示符(变量,方法名,类名)
命名规范:
(1)必须由数字,字母,_,$组成,并且不能以数字开头
(2)标示符对大小写敏感
(3)标示符不能是java的关键字+3个字面量(true,false,null)+2个    保留字(goto,const)	特别注意:String,sizeof不是关键字
(4)标示符的长度没有限制
(5)标示符支持中文汉字,但是不推荐,可能出现乱码问题
(6)类名,接口名每个单词首字母都大写
(7)变量名,方法名,首字母小写,以后每个单词首字母大写
   特别注意:构造方法除外
(8)包名全部采用小写字母,中间用.分隔
(9)常量全部用大写字母,并且中间用_分隔
(10)标示符提倡见名知意

2.数据类型
  基本类型(8种)和对象类型(内置对象类型和自定义对象类型)

3.变量
  给变量赋值的方式有几种?分别是什么?
  三种:
  1)字面量赋值	int i = 3;
  2)方法赋值	int i = getBits();
  3)表达式赋值	int i = sc.nextInt();
		boolean b = 2 < 3&&4 > 5;

4.运算符
  赋值运算符,算术运算符,逻辑运算符,比较运算符,位运算符
  三目运算符
  特殊运算符:instanceof

5.表达式
  由变量和运算符所组成的合法语句

6.类的定义
  package 包名;

  import 语句;

  public class 类名 {
       //属性的定义
       //方法的定义
  }

7.方法的定义
  修饰符 返回类型 方法名 ([参数列表])[可抛出的异常]{
	//方法体
  }

8.流程控制
  if和switch语句
  条件判断语句和分支语句

9.循环语句
  for,while,do while

10.注释
  //		单行注释
  /* */		多行注释
  /** */	文档注释
		只能用在类或者方法,通过javadoc指令来生成
		API文档
------------------------------------------------------

内置对象(API)的使用
java.lang.System类
System.out.println();
System.out.printf();
System.err.println();
System.exit(0);//强制退出JVM进程
System.currentTimeMillis();返回以毫秒为单位的当前时间

java.util.Date 日期类
创建对象
Date dt = new Date();

java.util.Calendar 日历类
创建对象
Calendar cal = Calendar.getInstance();
方法
cal.get(int field);

java.util.Scanner类 扫描对象,从键盘获取数据
创建对象
Scanner sc = new Scanner(System.in);
方法
sc.nextInt();
sc.nextLine();

java.lang.Math类 
数学运算类,它里面的所有方法都是静态的(static),无需创建对象
Math.abs(double a);		求绝对值
Math.PI;			得到PI值
Math.sqrt(double a);		返回a的开根号
Math.pow(double a,double b);	求a的b次方
Math.max(double a,double b);	比较并返回较大的数字
Math.min(double a,double b);	比较并返回较小的数字
Math.random();			产生[0,1)随机数,
				返回类型是double
----------------------------------------------------------
Java中产生随机数的两种方式:
1.Math.random();
  返回类型是double,范围是[0,1)
  如:产生1-100之间的随机数
     int result = (int)(Math.random()*100 + 1);

2.通过java.util.Random类
  //导包
  import java.util.Random;
  //创建对象
  Random rd = new Random();
  //调用方法
  rd.nextInt();//产生int范围内的随机数
  如:产生0-99之间的随机数[0,99]
     int result = rd.nextInt(100);
----------------------------------------------------------
递归(recursion)
在方法体中， 自已调用自己的过程，就是递归的过程

递归的思路可以帮助我们解决一些特殊的问题，如：
阶乘、菲波娜齐数列、汉诺塔问题、快速排序

优点:
递归只需少量的代码就可以描述解题过程中所需的反复多次的计算
大大减小程序的代码量

缺点:
相对于普通for循环等,它运行效率极低

注意:
1)一定要有退出条件,称为递归出口.否则会出现堆栈溢出:
	 java.lang.StackOverflowError
2)效率较低，每一次调用都要分配空间保存中间状态.

如： 采用递归来求指定数的阶乘
public long factor(int n) {
  //指定退出条件
  if(n == 1) {
     return 1L;
  }
  return n * factor(n - 1);
}

再如，求菲波娜齐数列
public long fibonacci(int n) {
    //指定退出条件
    if(n == 1 || n == 2) {
	return 1;
    }
    return fibonacci(n-1) + fibonacci(n - 2);
}
 
----------------------------------------------------------
数组(Array)
定义:由一组相同数据类型并且共享变量名的元素所组成,是一块
     连续的空间

作用:它是一种容器,可以用来存放一组相同类型的字面量或变量
     所以它可以存储和维护一组相同类型的数据

语法:
     类型[] 数组名 = new 类型[length];
或者
     类型 数组名[] = new 类型[length];

如:定义长度为10的整型数组
   int[] arr = new int[10];

   定义一个长度为5的计算机数组
   Computer[] cp = new Computer[5];

也可以先定义数组,在使用之前再创建
int[] arr;
arr = new int[10];

注意点:
a.数组是对象类型,不是基本类型
b.数组的长度必须要有,且一旦确定,是不可以改变的
c.数组元素的类型,决定了存放在其中的变量/字面量的类型
d.数组元素的类型,可以是基本类型,也可以是对象类型
e.数组元素共享变量名,所以,可以通过下标来访问数组元素
f.数组的下标是从0开始的,到length-1结束.
  通过下标访问数组元素时,如果超过下标范围,则会出现
  java.lang.ArrayIndexOutOfBoundsException
  数组下标越界异常.

如:
int[] arr = new int[10];
arr[0] = 100;
//访问下标是0的元素,也就是第一个元素,并且给它赋值为100
...
arr[10] = 200;//出现下标越界异常

如果每个元素都通过下标来赋值,那相对很麻烦,所以提供了
以下直接赋值的方式
int[] arr = new int[]{1,2,3,4,5};
或者
int[] arr = {1,2,3,4,5};//直接赋值

总结:给数组赋值的方式
1.定义数组的时候直接赋值
2.通过下标来给元素一一赋值
3.通过循环来给数组元素赋值
4.通过Arrays.fill()方法来赋值

数组的遍历(迭代)
1.普通for循环
  只能遍历有序的

2.增强for循环
  语法:
  for(数组元素的类型 变量名 : 数组名){
	System.out.println(变量名);
  }
  注:
  JDK1.5只有提供的遍历操作
  它可以实现遍历无序的集合

3.Arrays.toString(数组名);
  可以按照一种规范格式来打印数组元素
  [元素1, 元素2, .....元素N]

4.通过下标,一一把元素打印出来

5.自定义方法来输出数组元素
---------------------------------------------------------

数组的拷贝方法
System类
public static void arraycopy(Object src,int srcPos,Object dest,int destPos,int length)

此方法可以用来做数组之间元素的拷贝,各参数意义如下:
Object src	指原数组名
int srcPos	从原数组的第几个下标位置开始拷贝
Object dest	指目标数组(新数组)
int destPos	拷贝到目标数组的第几个下标位置
int length	拷贝的长度

注:
srcPos + length 决不能超过src数组的长度
destPos + length 决不能超过dest数组的长度
否则出现数组下标越界异常

小练习:
数组[45,54,3,2,42,4]
把此数组的42删除,并且在45和54之间插入一个值:888
int[] arr = {45,54,3,2,42,4};
int[] arr2 = new int[6];
System.arraycopy(arr,0,arr2,0,1);
arr2[1] = 888;
System.arraycopy(arr,1,arr2,2,3);
System.arraycopy(arr,5,arr2,5,1);
System.out.println(Arrays.toString(arr2));

---------------------------------------------------------
数组的排序
插入排序
冒泡排序
选择排序
快速排序
Arrays.sort(数组名);
---------------------------------------------------------
数组的应用:
数组作为一种容器,常见的业务有(增,删,改,查)
获取某一个元素的下标位置,求最值,排序,插入元素,删除元素
---------------------------------------------------------
二维数组
定义:
一维数组的数组,也就是说二维数组中的每一个元素都是一维数组

语法:
类型[][] 数组名 = new 类型[rows][cols];
或者
类型 数组名[][] = new 类型[rows][cols];

注:rows必须要有,cols可以省略

如:定义一个3行3列的二维整型数组
   int[][] arr = new int[3][3];

初始化:
   arr[0] = new int[]{1,2,3};
   arr[1] = new int[]{2,4,6};
   arr[2] = new int[]{10,20,30};
或者
   int[][] arr = {{1,2,3},{2,4,6},{10,20,30}};

采用循环来初始化(把二维数组arr的每一个元素赋值为1)
for(int i = 0;i < arr.length;i++){
	for(int j = 0;j < arr[i].length;j++){
		arr[i][j] = 1;
	}
}

不规则的二维数组
int[][] arr = new int[3][];
arr[0] = new int[]{1};
arr[1] = new int[]{1,2,1};
arr[2] = new int[]{1,2,3,2,1};

注:
如果在定义二维数组的时候,没有指定列的长度,则下面初始化
数组元素的时候,不能直接用{}来赋值,而应该通过new int[]{}
来赋值

二维数组通常的业务
坐标计算
所有规则方格的游戏
如:扫雷,五子棋,象棋...
---------------------------------------------------------

方法参数的传递:

参数列表是一种形参,也是局部变量,它的生命周期仅存在于当前
方法体中

实参,也就是实际参数,是指方法调用者(使用者)传递给方法的参数

有如下方法:
public class CommandCalc {
	public int add(int i,int j){
		//i,j是形参
		return i + j;
	}
}

调用者:
CommandCalc cc = new CommandCalc();
int a = 3;
int b = 7;
cc.add(a,b);
//a,b就是实参

在Java当中,参数的传递有两种方式:
值传递和引用传递

a.如果参数类型是基本类型,则采用值传递,也就是值本身
b.如果参数类型是对象类型,则采用引用传递,也就是传地址

当方法发生调用时,首先分配方法的空间,然后把方法的实参值
拷贝一份给形参,接下来设置方法的返回点再下来就是程序执行
被调用的方法,当被调用的方法执行完毕的时候,回到方法的返回
点也就是程序回到调用者处继续执行.

public void add(int a){
	a++;
}
调用者:
int i = 100;
add(i);
//请问此处i的值是多少?
  100

public void add(int[] a){
	for(int i = 0;i < a.length;i++){
		a[i] = a[i] + 1;//把每个元素都加1
		//相当于 a[i] += 1;
	}
}
调用者:
int[] arr = {1,5,10};
add(arr);
//请问,此处arr数组中的元素分别是多少?
  2,6,11
