Java IO流

作用:可以用来操作本地或者远程的文件内容
     支持二进制文件或者字符文件的读,写操作.

如何把操作系统中的文件/文件夹映射成JVM中的一个对象?

java.io.File

注:File类的实例只能读取文件/文件夹本身,而不能操作内容,
   如果要读写内容,通过Stream对象来操作


构造方法：
public File(String filepath)
public File(String parent, String child) 
public File(File parent, String child)


常用方法:
boolean isFile()//判断是否是文件
boolean isDirectory()//判断是否是目录
boolean isHidden()//判断是否为隐藏文件
boolean canWrite()//是否是可写入文件
boolean canRead()//是否是可读取文件

boolean createNewFile()//创建新文件
boolean mkdir()//创建目录
boolean mkdirs()//创建目录结构
boolean delete()//删除文件或者目录
void deleteOnExit()//当JVM进程结束后,再执行删除操作

boolean exists()//判断文件或者文件夹是否存在
long lenth()//得到文件大小,如果是目录,则返回值不确定

String getParent()//获取父目录的路径
File getParentFile()//获取父目录的File实例

String getPath()//得到路径字符串
String getAbsolutePath()//得到绝对路径

String[] list()
String[] list(FilenameFilter filter)//文件过滤器 

File[] listFiles()
File[] listFiles(FilenameFilter filter)
----------------------------------------------------
路径
分为绝对路径和相对路径

在windows中,

如果没有以盘符打头的路径就是相对路径
如:temo/logs
   corejava/day14/day14笔记.txt

如果以盘符打头的路径就是绝对路径
如:C:\Programm Files\QQ\QQ.exe
   F:\IO\CoreJava\day14笔记.txt
----------------------------------------------------

IO流的分类
流(Stream),是指不断从源头向目标"搬运"内容的一种特殊
的对象.

源头:可以是文件,内存,网络,键盘...
目标:可以是文件,内存,网络,显示器...


按照流的类型分类:
输入流(Input)和输出流(Output)

输入:从外界读到JVM中
输出:从JVM写到外界去

按照功能分类:
字节流和字符流


由于不同的流有不同的功能,所以,JDK中内置了很多类型:

1)字节输入流
java.io.InputStream	字节输入流 - 顶级抽象父类
  \- ByteArrayInputStream   操作字节数组的输入流
  \- FileInputStream	    操作文件的输入流
  \- ObjcetInputStream	    操作对象类型的输入流
  \- FilterInputStream	    输入过滤流
    \- BufferedInputStream  带缓存的输入流
    \- DataInputStream	    操作基本类型的输入流

公共方法:
public int read()//读取单个字节
public int read(byte[] buf)//尝试读取buf.length个字节
//返回值表示实际读取到的字节数,如果返回-1,则表示读取完毕

public int read(byte[] buf,int off,int length)

public void close();//关闭流,释放资源


2)字节输出流
java.io.OutputStream	字节输出流 - 顶级抽象父类
  \- ByteArrayOutputStream  操作字节数组的输出流
  \- FileOutputStream	    操作文件的输出流
  \- ObjcetOutputStream	    操作对象类型的输出流
  \- FilterOutputStream	    输出过滤流
    \- BufferedOutputStream 带缓存的输出流
    \- DataOutputStream	    操作基本类型的输出流

公共方法:
public int write(int b)//写入指定的单个字节
public int write(byte[] buf)
//尝试写入buf.length个字节

public void close()//关闭流,释放资源

---------------------------------------------------
基本步骤:
1.定位好源头(一般文件或者内存)或者定位好目标
2.根据源头来创建输入流或者根据目标来创建输出流
3.循环
  a)读取
  b)执行业务(复制,加密,搜索,合并,拆分...)
  c)写入
4.释放资源
---------------------------------------------------
练习:
文件复制,把一个文件复制到另一个文件夹中
---------------------------------------------------

Java IO流框架的设计模式 -- 装饰模式(油漆工模式)

核心思想:把类划分成两大类
一大类是基础类,另一大类是拓展类,这两个类都继承于
共同的抽象父类

基础流也叫做节点流,具备真正读写能力的流
拓展流也叫做过滤流,只提供拓展功能,本身不具备数据
读写能力,所以,要构建过滤流,必须要以节点流做为基础.

节点流:
ByteArrayInputStream/ByteArrayOutputStream
FileInputStream/FileOutputStream

拓展流:
FilterInputStream/FilterOutputStream
DataInputStream/DataOutputStream
BufferedInputStream/BufferedOutputStream
ObjcetInputStream/ObjcetOutputStream

IO流这样设计,可以让我们组合出任意功能的流,
多种功能可以形成非常强大的输入输出流.

如:
构建一个带缓存的文件操作流:
BufferedInputStream bis = new BufferedInputStream(
		new FileInputStream(filename));

构建一个读写基本类型的文件流
DataInputStream dis = new DataInputStream(
		new FileInputStream(filename));

构建一个读写对象类型的文件流
ObjectInputStream dis = new ObjectInputStream(
		new FileInputStream(filename));

构建一个既能读写对象类型,又带有缓存功能的文件流
ObjectInputStream dis = new ObjectInputStream(
		new BufferedInputStream(
		new FileInputSteam(filename)));

小练习:
利用DataInputStream/DataOutputStream来产生一个
永不重复的长整型,这个数总100开始.
public long generateGUID(){...}
--------------------------------------------------

对象数据类型[本质就是对象的序列化]

Java对象序列化的要求:
a)要求被序列化的对象必须实现java.io.Serializable接口
b)如果自定义类中其他自定义类的属性,则这个属性也要
  实现java.io.Serializable接口
c)如果序列化一个集合对象,则要求集合中的所有元素都必须
  实现java.io.Serializable接口

瞬态关键字:transient
如果序列化的对象,不想持久化一个或者多个属性,则可以
使用此关键字来阻止序列化

如:
public class Book{
	private long id;
	private String name;
	private transient String author;
	//author不会被序列化
}
---------------------------------------------------

字符流,专门用来操作字符的流(文本文件)

1)字符输入流
  java.io.Reader	  字符输入流的顶级抽象父类
   \- CharArrayReader	  操作内存数据-字符数组
   \- FileReader	  操作文本文件
   \- StringReader	  操作内存数据-字符串
   \- BufferedReader	  带缓存的字符流
   \- InputerStreamReader 桥接器(把字节流转换成字符流)

公共方法:
public int read()//读取单个字符
public int read(char[] char)
public int read(char[] char,int off,int len)
public void close();


2)字符输出流
   java.io.Writer	  字符输出流的顶级抽象父类
   \- CharArrayWriter
   \- FileWriter
   \- StringWriter 
   \- BufferedWriter  
   \- OutputStreamWriter
   \- PrintWriter

公共方法:
public int write()
public int write(char[] char)
public int write(char[] char,int off,int len)
public void close();
---------------------------------------------------

不同流的特殊方法:
1.BufferedReader
  方法:
  String readLine()//读取一行内容

构建一个带有缓存功能的字符输入流
BufferedReader br = new BufferedReader(filename)
//读取一行内容
String line = br.readLine();

2.PrintWriter
  方法:
  void println(String line)//写入一整行,再加上换行符
  void print(String line)//写入一整行,不换行

  flush()//刷新缓存内容

构建一个PrintWriter来操作文件
PrintWriter pw = new PrintWriter(filename);

//构建一个自动刷新功能的PrintWriter来操作文件
PrintWriter pw = new PrintWriter(
		new FileWriter(filename),true);
