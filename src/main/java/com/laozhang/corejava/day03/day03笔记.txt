方法的定义

//编写一个类的步骤
package xxx.xxx.xxx;

import xxx;

public class Xxx {
	
}

语法:
修饰符 返回类型 方法名([参数列表]) [可抛出的异常]{
	//方法体;
}

访问控制修饰符:
public		表示公开的,公有的,这个方法可以被所有类使用
protected	
[default]	默认,什么都不用写
private

普通修饰符:static,final,abstract...

注意:修饰符之间没有前后顺序!


返回类型:
1)可以是基本类型(8种),可以是对象类型
2)void 表示没有返回值

注:返回值和返回类型必须一致
   在方法体中,通过return来返回值
   如果一个方法的返回类型不是void,那么方法体中必然有return语句
   如果一个方法的返回类型是void,那么return语句可以任意


为什么要设计返回类型?
如果一个方法需要给调用者返回计算结果,那就应该设计成带有返回类型不是void的方法.


方法名:
由数字,字母,_,$组成,并且不能是数字开头
方法名的长度没有限制
方法名尽量取有意义的名字
方法名第一个字母小写,以后每个单词的首字母大写
public class Boy {
   public void whatCanIDoWhenMyGirlFriendCry(){
	//方法体
   }
}


参数列表:
提供方法完成所需要的参数
public class Calc {
   //调用者
   public static void main(String[] args){
	Calc cc = new Calc();
	cc.plus(3,4);

	int result = cc.plus2(3,4);
	System.out.println(result);
   }

   //普通方法
   public void plus(int i,int j){
	System.out.println(i + j);
   }
   public int plus2(int i,int j){
	return i + j;	
   }
}

形参:在方法中定义的参数就是形参
实参:方法调用者调用方法时,所传递的参数

局部变量:
在方法体中定义的变量,它的生命周期只存在于它所在的代码块中

形参也是局部变量

-----------------------------------------------------
重要:
1.如果在同一个类中,静态方法和静态方法之间可以直接用调用(直接写方法名),非静态方法和非静态方法中同样如此.不同
类型的方法,必须创建对象,然后通过对象名调用方法.

2.如果在不同类中,静态方法可以通过类名去调用(类名.静态方法),不管调用者是否是静态方法还是非静态的.非静态方法不管调用者是什么样的方法,都必须创建对象才能调用.
-----------------------------------------------------

MyEclipse常用快捷键
ctrl + M	最大化当前视窗
ctrl + O	打开类的大纲视图
ctrl + shift + H	打开类的层次结构图
ctrl + shift + R	快速搜索一个类
ctrl + D	删除当前行
ctrl + /	添加/去除单行注释
ctrl + shift + /	添加多行注释
ctrl + shift + \	去除多行注释
ctrl + shift + O	导入所有用到的类
ctrl + s	保存
ctrl + shift + F	格式化代码
alt + 左右键		来回切换打开的类
shift + 上下键		用来选定代码块

重点: 
Alt + /	  智能编辑助手(补齐代码以及相应的提示,使用频率极高!)
main方法  main
输出语句  syso

以后我们每次写完一段代码,都要执行三部曲:
1.ctrl + s
2.ctrl + shift + F
3.ctrl + s
这样,既能保证代码的正确性,又能保证代码的格式规范
--------------------------------------------------------

if条件判断
语法:
if(条件){
  //代码;
}

if(条件){
  //代码1;
}else{
  //代码2;
}

带分支的:
if(条件1){
  //代码1;
}else if(条件2){
  //代码2;
}else if(条件3){
  //代码3;
}
.......
}else{
  //代码N;
}

注意:
1.条件最好要互斥
2.else if语句可以是任意多个
3.条件必须是boolean类型的,它可以是一个变量,
  也可以是一个表达式
4.if else语句可以嵌套使用
5.当执行语句只有一句的时候,if的大括号可以省略

练习:
采用if else条件语句,设计一个程序
用来打印今天是星期几
[本例需要使用到java.util.Calender日历类]

--------------------------------------------------------
Java的格式化输出
标准语法:
%[argument_index$][flags][width][.precision]conversion
注:
flags	表示标记位,-表示左对齐,默认是右对齐
width	表示变量所占的宽度
.precision	表示浮点数的精度,宽度由width决定

System.out.printf(String format,Object...args);
System.out.println(name + "的生日是" + birthday + "号.");
System.out.printf("%s的生日是%s号.\n",name,birthday);
\n	表示换行
%s	代表字符串
%d	代表整数
%f	代表浮点数
%b	代表布尔值

注意点:
1.变量的排序问题
2.变量的类型决定用哪个占位符
--------------------------------------------------------
switch语句
语法:
switch(变量){
case 值1:
  //statement 1;
  [break;]
case 值2:
  //statement 2;
   [break;]
.....
[default:]
  //statement N;
}

注:
a.括号里面的是变量,它有且仅有5种类型
  byte,short,int,char,enum(枚举)

b.当case语句的值与switch变量相同时,则进入相应的case
  语句块中,并执行代码,遇到break,退出switch,否则,一直向
  下运行,直到碰到break或者运行到代码结束.

c.当case语句的值与switch变量不等时,则执行default语句块,
  前提是default语句块存在.

d.default代码块可以省略

小练习:
设计一个程序,给定指定月份,返回该月份的天数
public int getMonthDay(int year,int month){}

---------------------------------------------------------
循环语句
1.for循环
语法:
for(表达式一;表达式二;表达式三){
     //循环体;
}

说明:
表达式一,是初始化语句,只执行一次,而且可以有多个语句组成,也可以省略
表达式二,是条件判断语句,会循环执行,可以有多个语句组成,也可以省略
表达式三,是变量因子的变化语句,会循环执行,也可以由多个语句组成,也可以省略

如:循环10次
for(int i = 0;i < 10;i++){}

如果三个表达式都省略,则成为死循环
for(;;){} 完全等价于 while(true){}

再如:
int i,j;
for(i=0,j=0;i<10&&j<5;i+=2,j++){}

for循环可以嵌套使用

练习:
见ForDemo
---------------------------------------------------------
2.while循环
语法
while(条件){
  //循环体;
}

注:
a.条件必须是boolean类型的表达式或者复合语句
b.如果条件为永真的情况下,那么要在循环中加入break语句来退出   循环

如:
int i = 0;
while(i < 10){
   //循环体;
   i++;
}

如果不能确定循环次数,可以写成死循环
while(true){
  //循环体
  ...
  if(条件){
    break;//退出循环
  }
}

注:for循环和while循环都是后置循环,也就是说先进行条件判断
   再执行循环体,然后变量因子发生变化.
---------------------------------------------------------
do while循环
语法:
do{
  //循环体;
}while(条件);

注:
a.do while是一种前置循环,先做循环,再做条件判断
b.条件必须是boolean类型的
c.如果条件为永真的情况下,那么要在循环中加入break语句来退出   循环

如:
do{
   showMenu();
   int choice = sc.nextInt();
   ...
}while(choice != 4);
//从键盘获取输入,只要不为4,do while就不会退出

--------------------------------------------------------

break语句和continue语句

break语句表示退出循环或者switch语句,它只能用在循环或者
switch语句中,如果循环是多重嵌套的话,那么break只能跳出自
己所在的那一层循环.

continue表示退出本轮循环,继续执行下一次循环,它只能用在
循环中,continue后面的语句不会执行,直到下一轮循环开始.















